{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-a2f15441f9f4ca280542a1386ab25e1dfae2360d7d8f859f20cd34d1f75cc1bd0ce4fd40f1d1a558a5f66a9845bd6d7244260ee1bb2ef57955e404f507127c4a",
            "file": "src/app/state/app.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TodoState } from './todos/todo.reducer';\n\nexport interface AppState {\n  todos: TodoState;\n}\n",
            "properties": [
                {
                    "name": "todos",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TodoState",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Todo",
            "id": "interface-Todo-407573d3b2f3a448938763f8e9327aa3b3dc4e143fc8b3ce228e0ed540a777bdb9ed3ec13e4ef91dccf2166a977c4c8d22e4a7eb144434fa33de5911b66e919b",
            "file": "src/app/todo/todo.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Todo {\n  id: string;\n  content: string;\n}\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TodoState",
            "id": "interface-TodoState-6f7ef32362e2e31598d9e0bb59b864f70c3ca36f84c176d00efd62a6a602d5e0faac128eb132405d397779155fd1a945dc4c90c521164ea728062072cd940afe",
            "file": "src/app/state/todos/todo.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from '@ngrx/store';\nimport {\n  addTodo,\n  removeTodo,\n  loadTodos,\n  loadTodosSuccess,\n  loadTodosFailure,\n} from './todo.actions';\nimport { Todo } from '../../todo/todo.model';\n\nexport interface TodoState {\n  todos: Todo[];\n  error: string;\n  status: 'pending' | 'loading' | 'error' | 'success';\n}\n\nexport const initialState: TodoState = {\n  todos: [],\n  error: null,\n  status: 'pending',\n};\n\nexport const todoReducer = createReducer(\n  // Supply the initial state\n  initialState,\n  // Add the new todo to the todos array\n  on(addTodo, (state, { content }) => ({\n    ...state,\n    todos: [...state.todos, { id: Date.now().toString(), content: content }],\n  })),\n  // Remove the todo from the todos array\n  on(removeTodo, (state, { id }) => ({\n    ...state,\n    todos: state.todos.filter((todo) => todo.id !== id),\n  })),\n  // Trigger loading the todos\n  on(loadTodos, (state) => ({ ...state, status: 'loading' })),\n  // Handle successfully loaded todos\n  on(loadTodosSuccess, (state, { todos }) => ({\n    ...state,\n    todos: todos,\n    error: null,\n    status: 'success',\n  })),\n  // Handle todos load failure\n  on(loadTodosFailure, (state, { error }) => ({\n    ...state,\n    error: error,\n    status: 'error',\n  }))\n);\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"pending\" | \"loading\" | \"error\" | \"success\"",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "todos",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Todo[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "TodoEffects",
            "id": "injectable-TodoEffects-260418b4caeb29451bc4bde61e531275efd03a92ea08a65d15ed2518c813f1d25dfd639de742b3c42a949277a23398a46842b86b9a5269eb349d81ba65fac56d",
            "file": "src/app/state/todos/todo.effects.ts",
            "properties": [
                {
                    "name": "loadTodos$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadTodos),\n      switchMap(() =>\n        // Call the getTodos method, convert it to an observable\n        from(this.todoService.getTodos()).pipe(\n          // Take the returned value and return a new success action containing the todos\n          map((todos) => loadTodosSuccess({ todos: todos })),\n          // Or... if it errors return a new failure action containing the error\n          catchError((error) => of(loadTodosFailure({ error })))\n        )\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "saveTodos$",
                    "defaultValue": "createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(addTodo, removeTodo),\n        withLatestFrom(this.store.select(selectAllTodos)),\n        switchMap(([action, todos]) => from(this.todoService.saveTodos(todos)))\n      ),\n    // Most effects dispatch another action, but this one is just a \"fire and forget\" effect\n    { dispatch: false }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport {\n  addTodo,\n  removeTodo,\n  loadTodos,\n  loadTodosSuccess,\n  loadTodosFailure,\n} from './todo.actions';\nimport { TodoService } from '../../todo/todo.service';\nimport { of, from } from 'rxjs';\nimport { switchMap, map, catchError, withLatestFrom } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\nimport { selectAllTodos } from './todo.selectors';\nimport { AppState } from '../app.state';\n\n@Injectable()\nexport class TodoEffects {\n  constructor(\n    private actions$: Actions,\n    private store: Store<AppState>,\n    private todoService: TodoService\n  ) {}\n\n  // Run this code when a loadTodos action is dispatched\n  loadTodos$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadTodos),\n      switchMap(() =>\n        // Call the getTodos method, convert it to an observable\n        from(this.todoService.getTodos()).pipe(\n          // Take the returned value and return a new success action containing the todos\n          map((todos) => loadTodosSuccess({ todos: todos })),\n          // Or... if it errors return a new failure action containing the error\n          catchError((error) => of(loadTodosFailure({ error })))\n        )\n      )\n    )\n  );\n\n  // Run this code when the addTodo or removeTodo action is dispatched\n  saveTodos$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(addTodo, removeTodo),\n        withLatestFrom(this.store.select(selectAllTodos)),\n        switchMap(([action, todos]) => from(this.todoService.saveTodos(todos)))\n      ),\n    // Most effects dispatch another action, but this one is just a \"fire and forget\" effect\n    { dispatch: false }\n  );\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "todoService",
                        "type": "TodoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "todoService",
                        "type": "TodoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TodoService",
            "id": "injectable-TodoService-cca7737cc270c29f754ef3dafa75b782c8e2a32121bd90bf290105a61460b0260ffdd65071fd575b680fd189c3b4572e9e540724b6c9691bec3f39eedc361ec9",
            "file": "src/app/todo/todo.service.ts",
            "properties": [
                {
                    "name": "storageInitialised",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getTodos",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<Todo[]>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "saveTodos",
                    "args": [
                        {
                            "name": "todos",
                            "type": "Todo[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "todos",
                            "type": "Todo[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Storage } from '@ionic/storage-angular';\nimport { Todo } from './todo.model';\n\n@Injectable({ providedIn: 'root' })\nexport class TodoService {\n  private storageInitialised = false;\n\n  constructor(private storage: Storage) {}\n\n  async getTodos(): Promise<Todo[]> {\n    if (!this.storageInitialised) await this.storage.create();\n\n    return (await this.storage.get('todos')) || [];\n  }\n\n  async saveTodos(todos: Todo[]) {\n    if (!this.storageInitialised) await this.storage.create();\n\n    return this.storage.set('todos', todos);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storage",
                        "type": "Storage",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "storage",
                        "type": "Storage",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-ae9bd5f9254e2b7f77b34ca28024efc401075a7d8e5a24fa39efe192fcb763833a86af3747a44e90e0f912919c0443e067283d15aeae1bf216b8d21fe3ea4d85",
            "file": "e2e/src/app.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo() {\n    return browser.get('/');\n  }\n\n  getParagraphText() {\n    return element(by.deepCss('app-root ion-content')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getParagraphText",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-dfa210013cc74c97df88400d4e71111a12b504bc6ae2025aea8051143ff2c6f49525ea31d6b2e38050da4cae0791c2ef4d140f94f6821dd19dc31154af13f3ce",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.scss'],\n})\nexport class AppComponent {\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "templateData": "<ion-app>\n  <ion-router-outlet></ion-router-outlet>\n</ion-app>\n"
        },
        {
            "name": "TodoPage",
            "id": "component-TodoPage-0b10df3e61b9553ebb6d18d2b4e822e03645c0a5687256f07a3d692e7a6d30e1c9ba771dd3c4ba39c2afcc3a7c4580b480e77499a02922902046818fae42965b",
            "file": "src/app/todo/todo.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-todo",
            "styleUrls": [
                "todo.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "todo.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allTodos$",
                    "defaultValue": "this.store.select(selectAllTodos)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "todo",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addTodo",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeTodo",
                    "args": [
                        {
                            "name": "todo",
                            "type": "Todo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "todo",
                            "type": "Todo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { addTodo, removeTodo, loadTodos } from '../state/todos/todo.actions';\nimport { selectAllTodos } from '../state/todos/todo.selectors';\nimport { Todo } from './todo.model';\n\n@Component({\n  selector: 'app-todo',\n  templateUrl: 'todo.page.html',\n  styleUrls: ['todo.page.scss'],\n})\nexport class TodoPage implements OnInit {\n  public allTodos$ = this.store.select(selectAllTodos);\n  public todo = '';\n\n  constructor(private store: Store) {}\n\n  ngOnInit() {\n    this.store.dispatch(loadTodos());\n  }\n\n  addTodo() {\n    this.store.dispatch(addTodo({ content: this.todo }));\n    this.todo = '';\n  }\n\n  removeTodo(todo: Todo) {\n    this.store.dispatch(removeTodo({ id: todo.id }));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  padding: 1rem;\n}\n\nh2 {\n  font-weight: 900;\n  margin-bottom: 2rem;\n}\n\nion-input {\n  box-shadow: 0px 6px 20px 0px #d2d0e1;\n  width: 90%;\n  font-size: 1.2em;\n  padding: 1rem !important;\n}\n\nion-button {\n  margin: 2rem;\n  width: 90%;\n}\n\nion-list {\n  width: 100%;\n}\n\nion-label {\n  font-weight: bold;\n}\n",
                    "styleUrl": "todo.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ion-content>\n  <div class=\"container\">\n    <h2>Let's get things done!</h2>\n    <ion-input [(ngModel)]=\"todo\"> </ion-input>\n    <button color=\"success\" fill=\"outline\" (click)=\"addTodo()\"\n      >Add Todo</button\n    >\n\n    <ion-list lines=\"none\">\n      <ion-item\n        (click)=\"removeTodo(todo)\"\n        button\n        *ngFor=\"let todo of allTodos$ | async\"\n      >\n        <ion-icon name=\"checkmark-circle-outline\" slot=\"end\"></ion-icon>\n        <ion-label> {{todo.content}} </ion-label>\n      </ion-item>\n    </ion-list>\n  </div>\n</ion-content>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-9fa2c3a38595d88383ce5c2061ea71143ee204a40858447d3fbf5cd48552a864c20a120bf6277082fa05bc8fda2b4c2781afcf277782425670d2a9d2128cffd4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouteReuseStrategy } from '@angular/router';\n\nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';\nimport { IonicStorageModule } from '@ionic/storage-angular';\n\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { StoreModule } from '@ngrx/store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { environment } from '../environments/environment';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { todoReducer } from './state/todos/todo.reducer';\nimport { TodoEffects } from './state/todos/todo.effects';\n\n@NgModule({\n  declarations: [AppComponent],\n  entryComponents: [],\n  imports: [\n    BrowserModule,\n    IonicModule.forRoot(),\n    AppRoutingModule,\n    IonicStorageModule.forRoot(),\n    StoreModule.forRoot({ todos: todoReducer }),\n    StoreDevtoolsModule.instrument({\n      maxAge: 25,\n      logOnly: environment.production,\n    }),\n    EffectsModule.forRoot([TodoEffects]),\n  ],\n  providers: [{ provide: RouteReuseStrategy, useClass: IonicRouteStrategy }],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-2062fa91ac719e0effe2047a492f632b570e9e1870d21306805d55ed9b8aa07e77eb63f9292a264112cae98280e4fa11ade6b2cb278c97c7b2a807e9c54d57f5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { PreloadAllModules, RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: 'todo',\n    loadChildren: () =>\n      \"import('./todo/todo.module').then((m) => m.TodoPageModule)\",\n  },\n  {\n    path: '',\n    redirectTo: 'todo',\n    pathMatch: 'full',\n  },\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, { preloadingStrategy: PreloadAllModules }),\n  ],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TodoPageModule",
            "id": "module-TodoPageModule-01191200754d3567bc499a321091b89638f2c85a1b3096c115ab759e918d0b67846585e56e2a20ac8bad4b560a6da7af4154331cb229fdab9ea7db7cc823cf6b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/todo/todo.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\nimport { FormsModule } from '@angular/forms';\nimport { TodoPage } from './todo.page';\n\nimport { TodoPageRoutingModule } from './todo-routing.module';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, IonicModule, TodoPageRoutingModule],\n  declarations: [TodoPage],\n})\nexport class TodoPageModule {}\n  ",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TodoPage"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TodoPageRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TodoPageRoutingModule",
            "id": "module-TodoPageRoutingModule-d3e64ba92ad3377539e2f4263dec25be974ac8bbfc45104da427ecc2ac3a44e04f02faf42d37292e5bf523da752dd24da946eba75fc804ff80c459e209c8a5c9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/todo/todo-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { TodoPage } from './todo.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TodoPage,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TodoPageRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "addTodo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/todos/todo.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Todo Page] Add Todo',\n  props<{ content: string }>()\n)"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "capacitor.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CapacitorConfig",
                "defaultValue": "{\n  appId: 'io.ionic.starter',\n  appName: 'ngrx-todo',\n  webDir: 'www',\n  bundledWebRuntime: false\n}"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/todos/todo.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TodoState",
                "defaultValue": "{\n  todos: [],\n  error: null,\n  status: 'pending',\n}"
            },
            {
                "name": "loadTodos",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/todos/todo.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Todo Page] Load Todos')"
            },
            {
                "name": "loadTodosFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/todos/todo.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Todo API] Todo Load Failure',\n  props<{ error: string }>()\n)"
            },
            {
                "name": "loadTodosSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/todos/todo.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Todo API] Todo Load Success',\n  props<{ todos: Todo[] }>()\n)"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/todo.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "() => ({\n    props:{\n        label: 'TodoPage',\n        primary: true,\n    }\n})"
            },
            {
                "name": "removeTodo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/todos/todo.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Todo Page] Remove Todo',\n  props<{ id: string }>()\n)"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "selectAllTodos",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/todos/todo.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectTodos,\n  (state: TodoState) => state.todos\n)"
            },
            {
                "name": "selectTodos",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/todos/todo.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(state: AppState) => state.todos"
            },
            {
                "name": "todoReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/todos/todo.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  // Supply the initial state\n  initialState,\n  // Add the new todo to the todos array\n  on(addTodo, (state, { content }) => ({\n    ...state,\n    todos: [...state.todos, { id: Date.now().toString(), content: content }],\n  })),\n  // Remove the todo from the todos array\n  on(removeTodo, (state, { id }) => ({\n    ...state,\n    todos: state.todos.filter((todo) => todo.id !== id),\n  })),\n  // Trigger loading the todos\n  on(loadTodos, (state) => ({ ...state, status: 'loading' })),\n  // Handle successfully loaded todos\n  on(loadTodosSuccess, (state, { todos }) => ({\n    ...state,\n    todos: todos,\n    error: null,\n    status: 'success',\n  })),\n  // Handle todos load failure\n  on(loadTodosFailure, (state, { error }) => ({\n    ...state,\n    error: error,\n    status: 'error',\n  }))\n)"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/state/todos/todo.actions.ts": [
                {
                    "name": "addTodo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/todos/todo.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Todo Page] Add Todo',\n  props<{ content: string }>()\n)"
                },
                {
                    "name": "loadTodos",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/todos/todo.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Todo Page] Load Todos')"
                },
                {
                    "name": "loadTodosFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/todos/todo.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Todo API] Todo Load Failure',\n  props<{ error: string }>()\n)"
                },
                {
                    "name": "loadTodosSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/todos/todo.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Todo API] Todo Load Success',\n  props<{ todos: Todo[] }>()\n)"
                },
                {
                    "name": "removeTodo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/todos/todo.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Todo Page] Remove Todo',\n  props<{ id: string }>()\n)"
                }
            ],
            "capacitor.config.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "capacitor.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CapacitorConfig",
                    "defaultValue": "{\n  appId: 'io.ionic.starter',\n  appName: 'ngrx-todo',\n  webDir: 'www',\n  bundledWebRuntime: false\n}"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/app/state/todos/todo.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/todos/todo.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TodoState",
                    "defaultValue": "{\n  todos: [],\n  error: null,\n  status: 'pending',\n}"
                },
                {
                    "name": "todoReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/todos/todo.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  // Supply the initial state\n  initialState,\n  // Add the new todo to the todos array\n  on(addTodo, (state, { content }) => ({\n    ...state,\n    todos: [...state.todos, { id: Date.now().toString(), content: content }],\n  })),\n  // Remove the todo from the todos array\n  on(removeTodo, (state, { id }) => ({\n    ...state,\n    todos: state.todos.filter((todo) => todo.id !== id),\n  })),\n  // Trigger loading the todos\n  on(loadTodos, (state) => ({ ...state, status: 'loading' })),\n  // Handle successfully loaded todos\n  on(loadTodosSuccess, (state, { todos }) => ({\n    ...state,\n    todos: todos,\n    error: null,\n    status: 'success',\n  })),\n  // Handle todos load failure\n  on(loadTodosFailure, (state, { error }) => ({\n    ...state,\n    error: error,\n    status: 'error',\n  }))\n)"
                }
            ],
            "src/stories/todo.component.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/todo.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "() => ({\n    props:{\n        label: 'TodoPage',\n        primary: true,\n    }\n})"
                }
            ],
            "src/app/state/todos/todo.selectors.ts": [
                {
                    "name": "selectAllTodos",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/todos/todo.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectTodos,\n  (state: TodoState) => state.todos\n)"
                },
                {
                    "name": "selectTodos",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/todos/todo.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(state: AppState) => state.todos"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "todo",
                        "loadChildren": "./todo/todo.module#TodoPageModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/todo/todo-routing.module.ts",
                                        "module": "TodoPageRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "TodoPage"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "TodoPageModule"
                            }
                        ]
                    },
                    {
                        "path": "",
                        "redirectTo": "todo",
                        "pathMatch": "full"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "capacitor.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/app.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/todos/todo.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addTodo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/todos/todo.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadTodos",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/todos/todo.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadTodosFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/todos/todo.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadTodosSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/todos/todo.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "removeTodo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/todos/todo.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TodoEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/todos/todo.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TodoState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/todos/todo.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/todos/todo.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "todoReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/todos/todo.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllTodos",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/todos/todo.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTodos",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todo/todo.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Todo",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/todo/todo.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "TodoPage",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/todo/todo.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TodoService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/todo.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}